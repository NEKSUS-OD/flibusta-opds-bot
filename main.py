import logging
import aiohttp
from aiohttp import web
import asyncio
from urllib.parse import quote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
import xml.etree.ElementTree as ET

TOKEN = "7346488642:AAG3yOPQXT2Qo0Elxudrjq2cvVfC_BGxP0g"
OPDS_BASE_URL = "http://proxy.flibusta.net/opds"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OpdsBot:
    def __init__(self):
        self.search_results = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üìö –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏.")

    async def fetch_entries(self, url):
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.warning(f"–û—à–∏–±–∫–∞ HTTP {response.status} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}")
                    return None
                xml_data = await response.text()

        with open("last_response.xml", "w", encoding="utf-8") as f:
            f.write(xml_data)
        logger.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ last_response.xml")

        root = ET.fromstring(xml_data)
        ns = {'atom': 'http://www.w3.org/2005/Atom'}
        return root.findall('atom:entry', ns)

    async def search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.message.text.strip()
        if not query:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞.")
            return

        url = f"{OPDS_BASE_URL}/search?searchTerm={quote(query)}"
        entries = await self.fetch_entries(url)
        if entries is None:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        ns = {'atom': 'http://www.w3.org/2005/Atom'}

        def has_acquisition(entry):
            for l in entry.findall('atom:link', ns):
                if "acquisition" in l.attrib.get('rel', ''):
                    return True
            return False

        real_books = [e for e in entries if has_acquisition(e)]

        if not real_books:
            await update.message.reply_text("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        self.search_results[update.effective_chat.id] = []
        buttons = []
        reply_text = "üîç –ù–∞–π–¥–µ–Ω–æ:\n\n"

        for entry in real_books[:10]:
            title = entry.find('atom:title', ns).text
            author_el = entry.find('atom:author/atom:name', ns)
            author = author_el.text if author_el is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            link = None
            for l in entry.findall('atom:link', ns):
                if "acquisition" in l.attrib.get('rel', ''):
                    link = l.attrib.get('href')
                    break

            if not link:
                continue

            index = len(self.search_results[update.effective_chat.id])
            self.search_results[update.effective_chat.id].append({
                'title': title,
                'author': author,
                'link': link
            })

            reply_text += f"{index + 1}. {title} ‚Äî {author}\n"
            buttons.append([InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å {index + 1}", callback_data=str(index))])

        if not self.search_results[update.effective_chat.id]:
            await update.message.reply_text("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        await update.message.reply_text(reply_text, reply_markup=InlineKeyboardMarkup(buttons))

    async def button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        index = int(query.data)
        chat_id = query.message.chat.id

        if chat_id not in self.search_results or index >= len(self.search_results[chat_id]):
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        book = self.search_results[chat_id][index]
        text = (
            f"üìñ <b>{book['title']}</b>\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}\n\n"
            f"üîó <a href=\"{book['link']}\">–°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É</a>"
        )

        await query.edit_message_text(text=text, parse_mode="HTML")

async def start_webserver():
    async def handle(request):
        return web.Response(text="Bot is running")

    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

async def main():
    bot = OpdsBot()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.search))
    app.add_handler(CallbackQueryHandler(bot.button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ polling –±–æ—Ç–∞
    await asyncio.gather(
        start_webserver(),
        app.run_polling()
    )

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
